//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace OOSPrimarkFTPAgent.MailSendWebSvc {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MailSendSoap", Namespace="http://tempuri.org/")]
    public partial class MailSend : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback OOSCRMSendEmailTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageMultiCCOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageMultiCCAttachOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageMultiCCAttachSplitStrOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MailSend() {
            this.Url = global::OOSPrimarkFTPAgent.Properties.Settings.Default.OOSPrimarkFTPAgent_MailSendWebSvc_MailSend;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event OOSCRMSendEmailTestCompletedEventHandler OOSCRMSendEmailTestCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event SendMessageMultiCCCompletedEventHandler SendMessageMultiCCCompleted;
        
        /// <remarks/>
        public event SendMessageMultiCCAttachCompletedEventHandler SendMessageMultiCCAttachCompleted;
        
        /// <remarks/>
        public event SendMessageMultiCCAttachSplitStrCompletedEventHandler SendMessageMultiCCAttachSplitStrCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OOSCRMSendEmailTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool OOSCRMSendEmailTest() {
            object[] results = this.Invoke("OOSCRMSendEmailTest", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void OOSCRMSendEmailTestAsync() {
            this.OOSCRMSendEmailTestAsync(null);
        }
        
        /// <remarks/>
        public void OOSCRMSendEmailTestAsync(object userState) {
            if ((this.OOSCRMSendEmailTestOperationCompleted == null)) {
                this.OOSCRMSendEmailTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOOSCRMSendEmailTestOperationCompleted);
            }
            this.InvokeAsync("OOSCRMSendEmailTest", new object[0], this.OOSCRMSendEmailTestOperationCompleted, userState);
        }
        
        private void OnOOSCRMSendEmailTestOperationCompleted(object arg) {
            if ((this.OOSCRMSendEmailTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OOSCRMSendEmailTestCompleted(this, new OOSCRMSendEmailTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMessage(string fromAddress, string toAddress, string subject, bool IsBodyHtml, string mailBody) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        fromAddress,
                        toAddress,
                        subject,
                        IsBodyHtml,
                        mailBody});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(string fromAddress, string toAddress, string subject, bool IsBodyHtml, string mailBody) {
            this.SendMessageAsync(fromAddress, toAddress, subject, IsBodyHtml, mailBody, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string fromAddress, string toAddress, string subject, bool IsBodyHtml, string mailBody, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        fromAddress,
                        toAddress,
                        subject,
                        IsBodyHtml,
                        mailBody}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageMultiCC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMessageMultiCC(string fromAddress, string toAddress, string[] ccAddrList, string subject, bool IsBodyHtml, string mailBody) {
            object[] results = this.Invoke("SendMessageMultiCC", new object[] {
                        fromAddress,
                        toAddress,
                        ccAddrList,
                        subject,
                        IsBodyHtml,
                        mailBody});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageMultiCCAsync(string fromAddress, string toAddress, string[] ccAddrList, string subject, bool IsBodyHtml, string mailBody) {
            this.SendMessageMultiCCAsync(fromAddress, toAddress, ccAddrList, subject, IsBodyHtml, mailBody, null);
        }
        
        /// <remarks/>
        public void SendMessageMultiCCAsync(string fromAddress, string toAddress, string[] ccAddrList, string subject, bool IsBodyHtml, string mailBody, object userState) {
            if ((this.SendMessageMultiCCOperationCompleted == null)) {
                this.SendMessageMultiCCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageMultiCCOperationCompleted);
            }
            this.InvokeAsync("SendMessageMultiCC", new object[] {
                        fromAddress,
                        toAddress,
                        ccAddrList,
                        subject,
                        IsBodyHtml,
                        mailBody}, this.SendMessageMultiCCOperationCompleted, userState);
        }
        
        private void OnSendMessageMultiCCOperationCompleted(object arg) {
            if ((this.SendMessageMultiCCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageMultiCCCompleted(this, new SendMessageMultiCCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageMultiCCAttach", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMessageMultiCCAttach(string fromAddress, string toAddress, string[] ccAddrList, string subject, bool IsBodyHtml, string mailBody, string[] _AttachList) {
            object[] results = this.Invoke("SendMessageMultiCCAttach", new object[] {
                        fromAddress,
                        toAddress,
                        ccAddrList,
                        subject,
                        IsBodyHtml,
                        mailBody,
                        _AttachList});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageMultiCCAttachAsync(string fromAddress, string toAddress, string[] ccAddrList, string subject, bool IsBodyHtml, string mailBody, string[] _AttachList) {
            this.SendMessageMultiCCAttachAsync(fromAddress, toAddress, ccAddrList, subject, IsBodyHtml, mailBody, _AttachList, null);
        }
        
        /// <remarks/>
        public void SendMessageMultiCCAttachAsync(string fromAddress, string toAddress, string[] ccAddrList, string subject, bool IsBodyHtml, string mailBody, string[] _AttachList, object userState) {
            if ((this.SendMessageMultiCCAttachOperationCompleted == null)) {
                this.SendMessageMultiCCAttachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageMultiCCAttachOperationCompleted);
            }
            this.InvokeAsync("SendMessageMultiCCAttach", new object[] {
                        fromAddress,
                        toAddress,
                        ccAddrList,
                        subject,
                        IsBodyHtml,
                        mailBody,
                        _AttachList}, this.SendMessageMultiCCAttachOperationCompleted, userState);
        }
        
        private void OnSendMessageMultiCCAttachOperationCompleted(object arg) {
            if ((this.SendMessageMultiCCAttachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageMultiCCAttachCompleted(this, new SendMessageMultiCCAttachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageMultiCCAttachSplitStr", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMessageMultiCCAttachSplitStr(string fromAddress, string toAddress, string _ccAddrList, string subject, bool IsBodyHtml, string mailBody, string _AttachList) {
            object[] results = this.Invoke("SendMessageMultiCCAttachSplitStr", new object[] {
                        fromAddress,
                        toAddress,
                        _ccAddrList,
                        subject,
                        IsBodyHtml,
                        mailBody,
                        _AttachList});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageMultiCCAttachSplitStrAsync(string fromAddress, string toAddress, string _ccAddrList, string subject, bool IsBodyHtml, string mailBody, string _AttachList) {
            this.SendMessageMultiCCAttachSplitStrAsync(fromAddress, toAddress, _ccAddrList, subject, IsBodyHtml, mailBody, _AttachList, null);
        }
        
        /// <remarks/>
        public void SendMessageMultiCCAttachSplitStrAsync(string fromAddress, string toAddress, string _ccAddrList, string subject, bool IsBodyHtml, string mailBody, string _AttachList, object userState) {
            if ((this.SendMessageMultiCCAttachSplitStrOperationCompleted == null)) {
                this.SendMessageMultiCCAttachSplitStrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageMultiCCAttachSplitStrOperationCompleted);
            }
            this.InvokeAsync("SendMessageMultiCCAttachSplitStr", new object[] {
                        fromAddress,
                        toAddress,
                        _ccAddrList,
                        subject,
                        IsBodyHtml,
                        mailBody,
                        _AttachList}, this.SendMessageMultiCCAttachSplitStrOperationCompleted, userState);
        }
        
        private void OnSendMessageMultiCCAttachSplitStrOperationCompleted(object arg) {
            if ((this.SendMessageMultiCCAttachSplitStrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageMultiCCAttachSplitStrCompleted(this, new SendMessageMultiCCAttachSplitStrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void OOSCRMSendEmailTestCompletedEventHandler(object sender, OOSCRMSendEmailTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OOSCRMSendEmailTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OOSCRMSendEmailTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SendMessageMultiCCCompletedEventHandler(object sender, SendMessageMultiCCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageMultiCCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageMultiCCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SendMessageMultiCCAttachCompletedEventHandler(object sender, SendMessageMultiCCAttachCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageMultiCCAttachCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageMultiCCAttachCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SendMessageMultiCCAttachSplitStrCompletedEventHandler(object sender, SendMessageMultiCCAttachSplitStrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageMultiCCAttachSplitStrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageMultiCCAttachSplitStrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591